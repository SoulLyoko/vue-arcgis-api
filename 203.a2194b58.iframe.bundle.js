(window.webpackJsonp=window.webpackJsonp||[]).push([[203],{"./node_modules/@arcgis/core/tasks/GeometryService.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"default",(function(){return GeometryService_g}));var tslib_es6=__webpack_require__("./node_modules/@arcgis/core/chunks/tslib.es6.js"),property=__webpack_require__("./node_modules/@arcgis/core/core/accessorSupport/decorators/property.js"),ensureType=(__webpack_require__("./node_modules/@arcgis/core/core/arrayUtils.js"),__webpack_require__("./node_modules/@arcgis/core/core/has.js"),__webpack_require__("./node_modules/@arcgis/core/core/accessorSupport/ensureType.js")),subclass=__webpack_require__("./node_modules/@arcgis/core/core/accessorSupport/decorators/subclass.js"),request=__webpack_require__("./node_modules/@arcgis/core/request.js"),utils=__webpack_require__("./node_modules/@arcgis/core/rest/utils.js");__webpack_require__("./node_modules/@arcgis/core/geometry.js");var geometryService_utils=__webpack_require__("./node_modules/@arcgis/core/rest/geometryService/utils.js"),Polygon=__webpack_require__("./node_modules/@arcgis/core/geometry/Polygon.js");var jsonUtils=__webpack_require__("./node_modules/@arcgis/core/geometry/support/jsonUtils.js");var jsonMap=__webpack_require__("./node_modules/@arcgis/core/core/jsonMap.js");const _=new jsonMap.a({MGRS:"mgrs",USNG:"usng",UTM:"utm",GeoRef:"geo-ref",GARS:"gars",DMS:"dms",DDM:"ddm",DD:"dd"});var JSONSupport=__webpack_require__("./node_modules/@arcgis/core/core/JSONSupport.js");let GeneralizeParameters_p=class extends JSONSupport.a{constructor(r){super(r),this.deviationUnit=null,this.geometries=null,this.maxDeviation=null}};Object(tslib_es6.a)([Object(property.b)({type:String,json:{write:!0}})],GeneralizeParameters_p.prototype,"deviationUnit",void 0),Object(tslib_es6.a)([Object(property.b)({json:{read:{reader:r=>r?r.map((r=>Object(jsonUtils.a)(r))):null},write:{writer:(r,o)=>{o.geometries=r.map((r=>r.toJSON()))}}}})],GeneralizeParameters_p.prototype,"geometries",void 0),Object(tslib_es6.a)([Object(property.b)({type:Number,json:{write:!0}})],GeneralizeParameters_p.prototype,"maxDeviation",void 0),GeneralizeParameters_p=Object(tslib_es6.a)([Object(subclass.a)("esri.rest.support.GeneralizeParameters")],GeneralizeParameters_p),GeneralizeParameters_p.from=Object(ensureType.m)(GeneralizeParameters_p);const GeneralizeParameters_a=GeneralizeParameters_p,generalize_i=new jsonMap.a({109006:"centimeters",9102:"decimal-degrees",109005:"decimeters",9002:"feet",109009:"inches",9036:"kilometers",9001:"meters",9035:"miles",109007:"millimeters",109012:"nautical-miles",9096:"yards"});async function geometryService_generalize_i(i,m,p){const n=(m=GeneralizeParameters_a.from(m)).toJSON(),f=function generalize_r(e){const{geometries:r,deviationUnit:s,maxDeviation:o}=e.toJSON(),n={maxDeviation:o};return r&&r.length&&(n.geometries=JSON.stringify({geometryType:Object(jsonUtils.c)(r[0]),geometries:r}),n.sr=JSON.stringify(r[0].spatialReference)),generalize_i.write(s,n,"deviationUnit"),n}(m),j=Object(utils.c)(i),l={...j.query,f:"json",...f},u=n.geometries[0].spatialReference,c=Object(utils.a)(l,p);return Object(request.default)(j.path+"/generalize",c).then((({data:e})=>(e.geometries||[]).map((e=>Object(jsonUtils.a)(e).set({spatialReference:u})))))}var Polyline=__webpack_require__("./node_modules/@arcgis/core/geometry/Polyline.js");let LengthsParameters_l=class extends JSONSupport.a{constructor(o){super(o),this.calculationType=null,this.geodesic=null,this.lengthUnit=null,this.polylines=null}};Object(tslib_es6.a)([Object(property.b)({type:String,json:{write:!0}})],LengthsParameters_l.prototype,"calculationType",void 0),Object(tslib_es6.a)([Object(property.b)({type:Boolean,json:{write:!0}})],LengthsParameters_l.prototype,"geodesic",void 0),Object(tslib_es6.a)([Object(property.b)({json:{write:!0}})],LengthsParameters_l.prototype,"lengthUnit",void 0),Object(tslib_es6.a)([Object(property.b)({type:[Polyline.a],json:{read:{reader:o=>o?o.map((o=>Object(jsonUtils.a)(o))):null},write:{writer:(o,r)=>{r.polylines=o.map((o=>o.toJSON()))}}}})],LengthsParameters_l.prototype,"polylines",void 0),LengthsParameters_l=Object(tslib_es6.a)([Object(subclass.a)("esri.rest.support.LengthsParameters")],LengthsParameters_l),LengthsParameters_l.from=Object(ensureType.m)(LengthsParameters_l);const LengthsParameters_n=LengthsParameters_l,lengths_n=new jsonMap.a({preserveShape:"preserve-shape"});async function geometryService_lengths_n(n,m,p){const a=function lengths_o(e){const{polylines:o,lengthUnit:t,geodesic:i,calculationType:s}=e.toJSON(),r={};r.polylines=JSON.stringify(o);const l=e.polylines[0].spatialReference;return r.sr=l.wkid?l.wkid:JSON.stringify(l.toJSON()),t&&(r.lengthUnit=t),i&&(r.geodesic=i),s&&(r.calculationType=lengths_n.toJSON(s)),r}(m=LengthsParameters_n.from(m)),f=Object(utils.c)(n),i={...f.query,f:"json",...a},u=Object(utils.a)(i,p);return Object(request.default)(f.path+"/lengths",u).then((({data:t})=>t))}let OffsetParameters_i=class extends JSONSupport.a{constructor(o){super(o),this.bevelRatio=null,this.geometries=null,this.offsetDistance=null,this.offsetHow=null,this.offsetUnit=null}};Object(tslib_es6.a)([Object(property.b)({type:Number,json:{write:!0}})],OffsetParameters_i.prototype,"bevelRatio",void 0),Object(tslib_es6.a)([Object(property.b)({json:{read:{reader:o=>o?o.map((o=>Object(jsonUtils.a)(o))):null},write:{writer:(o,t)=>{t.geometries=o.map((o=>o.toJSON()))}}}})],OffsetParameters_i.prototype,"geometries",void 0),Object(tslib_es6.a)([Object(property.b)({type:Number,json:{write:!0}})],OffsetParameters_i.prototype,"offsetDistance",void 0),Object(tslib_es6.a)([Object(property.b)({type:String,json:{write:!0}})],OffsetParameters_i.prototype,"offsetHow",void 0),Object(tslib_es6.a)([Object(property.b)({type:String,json:{write:!0}})],OffsetParameters_i.prototype,"offsetUnit",void 0),OffsetParameters_i=Object(tslib_es6.a)([Object(subclass.a)("esri.rest.support.OffsetParameters")],OffsetParameters_i),OffsetParameters_i.from=Object(ensureType.m)(OffsetParameters_i);const OffsetParameters_m=OffsetParameters_i,offset_o=new jsonMap.a({esriGeometryOffsetBevelled:"bevelled",esriGeometryOffsetMitered:"mitered",esriGeometryOffsetRounded:"rounded"}),offset_s=new jsonMap.a({9001:"meters",9002:"feet",9036:"kilometers",9093:"miles",109012:"nautical-miles",109001:"yards"});async function offset_m(m,p,a){const i=function offset_r(e){const{geometries:r,bevelRatio:i,offsetDistance:f,offsetHow:n,offsetUnit:m}=e.toJSON(),l={bevelRatio:i,offsetDistance:f};return r&&r.length&&(l.geometries=JSON.stringify({geometryType:Object(jsonUtils.c)(r[0]),geometries:r}),l.sr=JSON.stringify(r[0].spatialReference)),n&&(l.offsetHow=offset_o.toJSON(n)),m&&(l.offsetUnit=offset_s.toJSON(m)),l}(p=OffsetParameters_m.from(p)),n=Object(utils.c)(m),j={...n.query,f:"json",...i},u=p.geometries[0].spatialReference,c=Object(utils.a)(j,a);return Object(request.default)(n.path+"/offset",c).then((({data:e})=>(e.geometries||[]).map((e=>Object(jsonUtils.a)(e).set({spatialReference:u})))))}var project=__webpack_require__("./node_modules/@arcgis/core/rest/geometryService/project.js");let RelationParameters_p=class extends JSONSupport.a{constructor(r){super(r),this.geometries1=null,this.geometries2=null,this.relation=null,this.relationParameter=null}};Object(tslib_es6.a)([Object(property.b)({json:{read:{reader:r=>r?r.map((r=>Object(jsonUtils.a)(r))):null},write:{writer:(r,e)=>{e.geometries1=r.map((r=>r.toJSON()))}}}})],RelationParameters_p.prototype,"geometries1",void 0),Object(tslib_es6.a)([Object(property.b)({json:{read:{reader:r=>r?r.map((r=>Object(jsonUtils.a)(r))):null},write:{writer:(r,e)=>{e.geometries2=r.map((r=>r.toJSON()))}}}})],RelationParameters_p.prototype,"geometries2",void 0),Object(tslib_es6.a)([Object(property.b)({type:String,json:{write:!0}})],RelationParameters_p.prototype,"relation",void 0),Object(tslib_es6.a)([Object(property.b)({type:String,json:{write:!0}})],RelationParameters_p.prototype,"relationParameter",void 0),RelationParameters_p=Object(tslib_es6.a)([Object(subclass.a)("esri.rest.support.RelationParameters")],RelationParameters_p),RelationParameters_p.from=Object(ensureType.m)(RelationParameters_p);const RelationParameters_a=RelationParameters_p,relation_t=new jsonMap.a({esriGeometryRelationCross:"cross",esriGeometryRelationDisjoint:"disjoint",esriGeometryRelationIn:"in",esriGeometryRelationInteriorIntersection:"interior-intersection",esriGeometryRelationIntersection:"intersection",esriGeometryRelationLineCoincidence:"line-coincidence",esriGeometryRelationLineTouch:"line-touch",esriGeometryRelationOverlap:"overlap",esriGeometryRelationPointTouch:"point-touch",esriGeometryRelationTouch:"touch",esriGeometryRelationWithin:"within",esriGeometryRelationRelation:"relation"});async function relation_a(a,n,i){const m=function relation_o(e){const{geometries1:o,geometries2:r,relation:n,relationParameter:s}=e.toJSON(),a={};if(o&&o.length){a.geometries1=JSON.stringify({geometryType:Object(jsonUtils.c)(o[0]),geometries:o});const e=o[0].spatialReference;a.sr=e.wkid?e.wkid:JSON.stringify(e)}return r&&r.length>0&&(a.geometries2=JSON.stringify({geometryType:Object(jsonUtils.c)(r[0]),geometries:r})),n&&(a.relation=relation_t.toJSON(n)),s&&(a.relationParam=s),a}(n=RelationParameters_a.from(n)),p=Object(utils.c)(a),f={...p.query,f:"json",...m},u=Object(utils.a)(f,i);return Object(request.default)(p.path+"/relation",u).then((({data:r})=>r.relations))}var urlUtils=__webpack_require__("./node_modules/@arcgis/core/core/urlUtils.js");let TrimExtendParameters_m=class extends JSONSupport.a{constructor(r){super(r),this.extendHow="default-curve-extension",this.polylines=null,this.trimExtendTo=null}};Object(tslib_es6.a)([Object(property.b)({type:String,json:{write:!0}})],TrimExtendParameters_m.prototype,"extendHow",void 0),Object(tslib_es6.a)([Object(property.b)({type:[Polyline.a],json:{read:{reader:r=>r?r.map((r=>Object(jsonUtils.a)(r))):null},write:{writer:(r,o)=>{o.polylines=r.map((r=>r.toJSON()))}}}})],TrimExtendParameters_m.prototype,"polylines",void 0),Object(tslib_es6.a)([Object(property.b)({json:{read:{reader:r=>r?Object(jsonUtils.a)(r):null},write:{writer:(r,o)=>{o.trimExtendTo=r.toJSON()}}}})],TrimExtendParameters_m.prototype,"trimExtendTo",void 0),TrimExtendParameters_m=Object(tslib_es6.a)([Object(subclass.a)("esri.rest.support.TrimExtendParameters")],TrimExtendParameters_m),TrimExtendParameters_m.from=Object(ensureType.m)(TrimExtendParameters_m);const TrimExtendParameters_n=TrimExtendParameters_m,trimExtend_t=new jsonMap.a({0:"default-curve-extension",1:"relocate-ends",2:"keep-end-attributes",4:"no-end-attributes",8:"no-extend-at-from",16:"no-extend-at-to"});async function trimExtend_i(i,p,n){const a=function trimExtend_n(e){const{extendHow:n,polylines:o,trimExtendTo:r}=e.toJSON(),i={};return i.extendHow=trimExtend_t.toJSON(n),o&&o.length&&(i.polylines=JSON.stringify(o),i.sr=JSON.stringify(o[0].spatialReference)),r&&(i.trimExtendTo=JSON.stringify(r)),i}(p=TrimExtendParameters_n.from(p)),f=Object(utils.c)(i),j={...f.query,f:"json",...a},u=p.sr,y=Object(utils.a)(j,n);return Object(request.default)(f.path+"/trimExtend",y).then((({data:t})=>(t.geometries||[]).map((({paths:t})=>new Polyline.a({spatialReference:u,paths:t})))))}var Task=__webpack_require__("./node_modules/@arcgis/core/tasks/Task.js");let C=class extends Task.a{constructor(r){super(r),this.url=null}areasAndLengths(r,e){return async function areasAndLengths_o(o,s,e){const a=Object(utils.c)(o),u={...a.query,f:"json",...s.toJSON()},f=Object(utils.a)(u,e);return Object(request.default)(a.path+"/areasAndLengths",f).then((t=>t.data))}(this.url,r,e)}autoComplete(r,e,t){return async function autoComplete_i(i,n,m,p){const g=n[0].spatialReference,f=Object(utils.c)(i),a={...f.query,f:"json",sr:JSON.stringify(g.toJSON()),polygons:JSON.stringify(Object(geometryService_utils.b)(n).geometries),polylines:JSON.stringify(Object(geometryService_utils.b)(m).geometries)},y=Object(utils.a)(a,p);return Object(request.default)(f.path+"/autoComplete",y).then((({data:e})=>(e.geometries||[]).map((({rings:e})=>new Polygon.a({spatialReference:g,rings:e})))))}(this.url,r,e,t)}buffer(r,e){return async function buffer_s(s,n,i){const m=Object(utils.c)(s),a={...m.query,f:"json",...n.toJSON()},f=n.outSpatialReference||n.geometries[0].spatialReference,p=Object(utils.a)(a,i);return Object(request.default)(m.path+"/buffer",p).then((e=>(e.data.geometries||[]).map((({rings:e})=>new Polygon.a({spatialReference:f,rings:e})))))}(this.url,r,e)}convexHull(r,e){return async function convexHull_i(i,n,m){const f=n[0].spatialReference,p=Object(utils.c)(i),a={...p.query,f:"json",sr:JSON.stringify(f.toJSON()),geometries:JSON.stringify(Object(geometryService_utils.b)(n))},u=Object(utils.a)(a,m);return Object(request.default)(p.path+"/convexHull",u).then((({data:t})=>Object(jsonUtils.a)(t.geometry).set({spatialReference:f})))}(this.url,r,e)}cut(r,e,t){return async function cut_o(o,i,n,m){const a=Object(utils.c)(o),p=i[0].spatialReference,u={...m,query:{...a.query,f:"json",sr:JSON.stringify(p),target:JSON.stringify({geometryType:Object(jsonUtils.c)(i[0]),geometries:i}),cutter:JSON.stringify(n)}},c=await Object(request.default)(a.path+"/cut",u),{cutIndexes:f,geometries:g=[]}=c.data;return{cutIndexes:f,geometries:g.map((e=>{const t=Object(jsonUtils.a)(e);return t.spatialReference=p,t}))}}(this.url,r,e,t)}densify(r,e){return async function densify_o(o,i,n){const m=i.geometries[0].spatialReference,p=Object(utils.c)(o),a={...p.query,f:"json",...i.toJSON()},f=Object(utils.a)(a,n);return Object(request.default)(p.path+"/densify",f).then((({data:e})=>(e.geometries||[]).map((e=>Object(jsonUtils.a)(e).set({spatialReference:m})))))}(this.url,r,e)}difference(r,e,t){return async function difference_i(i,m,n,f){const p=m[0].spatialReference,y=Object(utils.c)(i);let a={query:{...y.query,f:"json",sr:JSON.stringify(p.toJSON()),geometries:JSON.stringify(Object(geometryService_utils.b)(m)),geometry:JSON.stringify({geometryType:Object(jsonUtils.c)(n),geometry:n.toJSON()})}};return f&&(a={...f,...a}),Object(request.default)(y.path+"/difference",a).then((({data:e})=>(e.geometries||[]).map((e=>Object(jsonUtils.a)(e).set({spatialReference:p})))))}(this.url,r,e,t)}distance(r,e){return async function distance_r(r,s,e){const a=Object(utils.c)(r),i={...a.query,f:"json",...s.toJSON()},c=Object(utils.a)(i,e);return Object(request.default)(a.path+"/distance",c).then((({data:t})=>t&&t.distance))}(this.url,r,e)}fromGeoCoordinateString(r,e){return async function fromGeoCoordinateString_t(t,i,e){const c={};null!=i.sr&&"object"==typeof i.sr?c.sr=i.sr.wkid||JSON.stringify(i.sr):c.sr=i.sr,c.strings=JSON.stringify(i.strings);const f=i.conversionType||"mgrs";c.conversionType=_.toJSON(f),c.conversionMode=i.conversionMode;const m=Object(utils.c)(t),p={...m.query,f:"json",...c},u=Object(utils.a)(p,e);return Object(request.default)(m.path+"/fromGeoCoordinateString",u).then((({data:o})=>o.coordinates))}(this.url,r,e)}generalize(r,e){return geometryService_generalize_i(this.url,r,e)}intersect(r,e,t){return async function intersect_m(m,n,p,f){const y=n[0].spatialReference,a=Object(utils.c)(m),g={...a.query,f:"json",sr:JSON.stringify(y.toJSON()),geometries:JSON.stringify(Object(geometryService_utils.b)(n)),geometry:JSON.stringify({geometryType:Object(jsonUtils.c)(p),geometry:p.toJSON()})},u=Object(utils.a)(g,f);return Object(request.default)(a.path+"/intersect",u).then((({data:e})=>(e.geometries||[]).map((e=>Object(jsonUtils.a)(e).set({spatialReference:y})))))}(this.url,r,e,t)}labelPoints(r,e){return function labelPoints_r(r,i,n){const p=i.map((t=>t.toJSON())),a=i[0].spatialReference,f=Object(utils.c)(r),l={...f.query,f:"json",sr:a.wkid?a.wkid:JSON.stringify(a.toJSON()),polygons:JSON.stringify(p)},m=Object(utils.a)(l,n);return Object(request.default)(f.path+"/labelPoints",m).then((({data:t})=>(t.labelPoints||[]).map((t=>Object(jsonUtils.a)(t).set({spatialReference:a})))))}(this.url,r,e)}lengths(r,e){return geometryService_lengths_n(this.url,r,e)}offset(r,e){return offset_m(this.url,r,e)}project(r,e){return Object(project.a)(this.url,r,e)}relation(r,e){return relation_a(this.url,r,e)}reshape(r,e,t){return async function reshape_i(i,n,p,a){const f=n.spatialReference,m=Object(utils.c)(i),y={...m.query,f:"json",sr:JSON.stringify(f.toJSON()),target:JSON.stringify({geometryType:Object(jsonUtils.c)(n),geometry:n.toJSON()}),reshaper:JSON.stringify(p.toJSON())},g=Object(utils.a)(y,a);return Object(request.default)(m.path+"/reshape",g).then((({data:e})=>Object(jsonUtils.a)(e.geometry).set({spatialReference:f})))}(this.url,r,e,t)}simplify(r,e){return async function simplify_o(o,m,f){const n="string"==typeof o?Object(urlUtils.K)(o):o,p=m[0].spatialReference,a=Object(jsonUtils.c)(m[0]),u={...f,query:{...n.query,f:"json",sr:p.wkid?p.wkid:JSON.stringify(p),geometries:JSON.stringify(Object(geometryService_utils.b)(m))}},{data:y}=await Object(request.default)(n.path+"/simplify",u);return Object(geometryService_utils.a)(y.geometries,a,p)}(this.url,r,e)}toGeoCoordinateString(r,e){return async function toGeoCoordinateString_t(t,i,e){const c={};null!=i.sr&&"object"==typeof i.sr?c.sr=i.sr.wkid||JSON.stringify(i.sr):c.sr=i.sr,c.coordinates=JSON.stringify(i.coordinates);const d=i.conversionType||"mgrs";c.conversionType=_.toJSON(d),c.conversionMode=i.conversionMode,c.numOfDigits=i.numOfDigits,c.rounding=i.rounding,c.addSpaces=i.addSpaces;const a=Object(utils.c)(t),u={...a.query,f:"json",...c},f=Object(utils.a)(u,e);return Object(request.default)(a.path+"/toGeoCoordinateString",f).then((({data:o})=>o.strings))}(this.url,r,e)}trimExtend(r,e){return trimExtend_i(this.url,r,e)}union(r,e){return async function union_i(i,n,m){const f=n[0].spatialReference,p=Object(utils.c)(i),a={...p.query,f:"json",sr:JSON.stringify(f.toJSON()),geometries:JSON.stringify(Object(geometryService_utils.b)(n))},u=Object(utils.a)(a,m);return Object(request.default)(p.path+"/union",u).then((({data:t})=>Object(jsonUtils.a)(t.geometry).set({spatialReference:f})))}(this.url,r,e)}};C.UNIT_METER=9001,C.UNIT_GERMAN_METER=9031,C.UNIT_FOOT=9002,C.UNIT_SURVEY_FOOT=9003,C.UNIT_CLARKE_FOOT=9005,C.UNIT_FATHOM=9014,C.UNIT_NAUTICAL_MILE=9030,C.UNIT_SURVEY_CHAIN=9033,C.UNIT_SURVEY_LINK=9034,C.UNIT_SURVEY_MILE=9035,C.UNIT_KILOMETER=9036,C.UNIT_CLARKE_YARD=9037,C.UNIT_CLARKE_CHAIN=9038,C.UNIT_CLARKE_LINK=9039,C.UNIT_SEARS_YARD=9040,C.UNIT_SEARS_FOOT=9041,C.UNIT_SEARS_CHAIN=9042,C.UNIT_SEARS_LINK=9043,C.UNIT_BENOIT_1895A_YARD=9050,C.UNIT_BENOIT_1895A_FOOT=9051,C.UNIT_BENOIT_1895A_CHAIN=9052,C.UNIT_BENOIT_1895A_LINK=9053,C.UNIT_BENOIT_1895B_YARD=9060,C.UNIT_BENOIT_1895B_FOOT=9061,C.UNIT_BENOIT_1895B_CHAIN=9062,C.UNIT_BENOIT_1895B_LINK=9063,C.UNIT_INDIAN_FOOT=9080,C.UNIT_INDIAN_1937_FOOT=9081,C.UNIT_INDIAN_1962_FOOT=9082,C.UNIT_INDIAN_1975_FOOT=9083,C.UNIT_INDIAN_YARD=9084,C.UNIT_INDIAN_1937_YARD=9085,C.UNIT_INDIAN_1962_YARD=9086,C.UNIT_INDIAN_1975_YARD=9087,C.UNIT_FOOT_1865=9070,C.UNIT_RADIAN=9101,C.UNIT_DEGREE=9102,C.UNIT_ARCMINUTE=9103,C.UNIT_ARCSECOND=9104,C.UNIT_GRAD=9105,C.UNIT_GON=9106,C.UNIT_MICRORADIAN=9109,C.UNIT_ARCMINUTE_CENTESIMAL=9112,C.UNIT_ARCSECOND_CENTESIMAL=9113,C.UNIT_MIL6400=9114,C.UNIT_BRITISH_1936_FOOT=9095,C.UNIT_GOLDCOAST_FOOT=9094,C.UNIT_INTERNATIONAL_CHAIN=109003,C.UNIT_INTERNATIONAL_LINK=109004,C.UNIT_INTERNATIONAL_YARD=109001,C.UNIT_STATUTE_MILE=9093,C.UNIT_SURVEY_YARD=109002,C.UNIT_50KILOMETER_LENGTH=109030,C.UNIT_150KILOMETER_LENGTH=109031,C.UNIT_DECIMETER=109005,C.UNIT_CENTIMETER=109006,C.UNIT_MILLIMETER=109007,C.UNIT_INTERNATIONAL_INCH=109008,C.UNIT_US_SURVEY_INCH=109009,C.UNIT_INTERNATIONAL_ROD=109010,C.UNIT_US_SURVEY_ROD=109011,C.UNIT_US_NAUTICAL_MILE=109012,C.UNIT_UK_NAUTICAL_MILE=109013,C.UNIT_SQUARE_INCHES="esriSquareInches",C.UNIT_SQUARE_FEET="esriSquareFeet",C.UNIT_SQUARE_YARDS="esriSquareYards",C.UNIT_ACRES="esriAcres",C.UNIT_SQUARE_MILES="esriSquareMiles",C.UNIT_SQUARE_MILLIMETERS="esriSquareMillimeters",C.UNIT_SQUARE_CENTIMETERS="esriSquareCentimeters",C.UNIT_SQUARE_DECIMETERS="esriSquareDecimeters",C.UNIT_SQUARE_METERS="esriSquareMeters",C.UNIT_ARES="esriAres",C.UNIT_HECTARES="esriHectares",C.UNIT_SQUARE_KILOMETERS="esriSquareKilometers",Object(tslib_es6.a)([Object(property.b)()],C.prototype,"url",void 0),C=Object(tslib_es6.a)([Object(subclass.a)("esri.tasks.GeometryService")],C);const GeometryService_g=C}}]);